# NOTE: update this with your service name
service: notes-app-2-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  #Stage based on command argument; else default to provider
  stage: ${opt:stage, self:provider.stage}
  #Set the tablename here to use for local testing
  tableName: ${self:custom.stage}-notes

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2

  #Available through process.env
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  #Defines IAM permission policy for Lambda function
  #(able to access DynamoDB)
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem

        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "Fn::GetAtt": [NotesTable, Arn]

#Defines HTTP API endpoint that calls the main function in create.js
#path: url path is /notes
#method: POST request
#cors: enabled CORS for cross domain API call
#authorizer: authenticate through AWS IAM role
functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
        
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

#Create resources with CloudFormation templates
resources:
  #API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  #DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  #S3
  - ${file(resources/s3-bucket.yml)}
  #Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}